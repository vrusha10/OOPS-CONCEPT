 OPERATOR OVERLOADING :
                Operator overloading is a compile-time polymorphism in which the operator is overloaded to provide the special meaning to the user-defined data type. Operator overloading is used to overload or redefines most of the operators available in C++. It is used to perform the operation on the user-defined data type. For example, C++ provides the ability to add the variables of the user-defined data type that is applied to the built-in data types.\par
Operator that cannot be overloaded are as follows:\

Scope operator (::)
Sizeof\
member selector(.)
member pointer selector(*)
ternary operator(?:)
Unary operator

#include<iostream>
using namespace std;
class Unary
{
    int x;
public:
    Unary ()
{
        x=3;
    }
    void operator ++()
{
        ++x;
    }
    void print ()
{
        cout << x << endl;
    }
};
int main()
{
    Unary u;
    ++u;
    u.print();
}



/* Binary Operator */

#include<iostream>
using namespace std;
class Binary
{
    int x,y;
public:
    Binary (int m=0,int n=0)
    {
        x=m;
        y=n;
    }
    Binary operator +(Binary const &obj)
    {
        Binary t;
        t.x = x + obj.x;
        t.y = y + obj.y;
        return t;
    }
    void print()
    {
        cout << "X= " <<x<<" Y= "<<y<<endl;
    }

};
int main()
{
    Binary b1(1,2),b2(4,5),b3;
    b3=b1+b2;
    b3.print();
} 
