 
COPY CONSTRUCTOR:- A Copy constructor is an overloaded constructor used to declare and initialize an object from another object.#include <iostream>
using namespace std;
class Rectangle
{
    int len,bre;
    public:
    Rectangle(int x,int y)
    {
        len=x;
        bre=y;
    }
    Rectangle(Rectangle &rect)
    {
        len=rect.len;
        bre=rect.bre;
    }
    void fun()
    {
        cout<<len<<" "<<bre<<endl;
    }
};

int main()
{
   Rectangle r1(10,20);
   r1.fun();
   Rectangle r2(r1);
   r2.fun();
}

-> Two types of copies are produced by the constructor:
1) Shallow copy
2) Deep copy
Shallow Copy:-
The default copy constructor can only produce the shallow copy.
A Shallow copy is defined as the process of creating the copy of an object by copying data of all the member variables as it is.
#include <iostream>  
using namespace std; 
class shallow{
    int a;  
    int b;  
    int *p;  
    public:  
       void setdata(int x,int y,int z)  
    {  
        a=x;  
        b=y;  
        p=z;  
    }  
    void showdata()  
    { 
        std::cout << "value of a is : " <<a<< std::endl;  
        std::cout << "value of b is : " <<b<< std::endl;  
        std::cout << "value of p is : " <<p<< std::endl; 
    } 
};  
int main()  
{  
  shallow d1;  
  d1.setdata(4,5,7);  
  Demo d2 = d1;  
  d2.showdata();  
  }  



DEEP COPY:-The mumber variables etc. for any objects have their own memory locations.
-> Any changes in obj1 is not reflects in obj2.

#include<iostream>
using namespace std;
class deep{
    public:
    int var;
    deep(int x){
        var=x;
    }
    deep(const deep &obj) {
        var = obj.var;
    }
};
int main(){
    deep d1(10);
    deep d2 = d1;
    cout<<"Before the values";
    cout<<"d1 :"<<d1.var<<endl;
    cout<<"d2 :"<<d2.var<<endl;
    d1.var =20;
    cout<<"after the values"<<endl;
    cout<<"d1 :"<<d1.var<<endl;
    cout<<"d2 :"<<d2.var<<endl;
}
